#Modele de donnéees
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Classe(db.Model):
    __tablename__ = 'classe'
    code = db.Column(db.String(5), primary_key=True)
    nom = db.Column(db.String(10), nullable=False)
    niveau = db.Column(db.SmallInteger)
    heurecours = db.Column(db.SmallInteger)

    def __repr__(self):
        return f'<Classe {self.nom}>'

class Employe(db.Model):
    __tablename__ = 'employe'
    num = db.Column(db.Integer, primary_key=True)

class Enseignant(db.Model):
    __tablename__ = 'enseignant'
    matricule = db.Column(db.String(20), primary_key=True)
    nom = db.Column(db.String(20))
    prenom = db.Column(db.String(20))
    datenaissance = db.Column(db.Date)
    heurecourssemaines = db.Column(db.SmallInteger)
    status = db.Column(db.String(1))

    def __repr__(self):
        return f'<Enseignant {self.nom} {self.prenom}>'

class Matiere(db.Model):
    __tablename__ = 'matiere'
    id = db.Column(db.SmallInteger, primary_key=True)
    intitule = db.Column(db.String(20), nullable=False)

    def __repr__(self):
        return f'<Matiere {self.intitule}>'

class EnseignantMatiere(db.Model):
    __tablename__ = 'enseignant_matiere'
    idenseignant = db.Column(db.String(20), db.ForeignKey('enseignant.matricule'), primary_key=True)
    idmatiere = db.Column(db.SmallInteger, db.ForeignKey('matiere.id'), primary_key=True)

class EnseignantMatiereClasse(db.Model):
    __tablename__ = 'enseignant_matiere_classe'
    idenseignant = db.Column(db.String(20), db.ForeignKey('enseignant.matricule'), primary_key=True)
    idmatiere = db.Column(db.SmallInteger, db.ForeignKey('matiere.id'), primary_key=True)
    idclasse = db.Column(db.String(5), db.ForeignKey('classe.code'), primary_key=True)
    jour = db.Column(db.String(20))
    duree = db.Column(db.SmallInteger)
    periode = db.Column(db.Time, nullable=False)

#Formulaire
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, DateField, SelectField, TimeField
from wtforms.validators import DataRequired

class ClasseForm(FlaskForm):
    code = StringField('Code', validators=[DataRequired()])
    nom = StringField('Nom', validators=[DataRequired()])
    niveau = IntegerField('Niveau')
    heurecours = IntegerField('Heure de Cours')

class EnseignantForm(FlaskForm):
    matricule = StringField('Matricule', validators=[DataRequired()])
    nom = StringField('Nom')
    prenom = StringField('Prénom')
    datenaissance = DateField('Date de Naissance', format='%Y-%m-%d')
    heurecourssemaines = IntegerField('Heures de Cours par Semaine')
    status = SelectField('Statut', choices=[('1', 'Actif'), ('0', 'Inactif')])

class MatiereForm(FlaskForm):
    id = IntegerField('ID', validators=[DataRequired()])
    intitule = StringField('Intitulé', validators=[DataRequired()])

#APP 
from flask import Flask, render_template, redirect, url_for
from models import db, Classe, Enseignant, Matiere
from forms import ClasseForm, EnseignantForm, MatiereForm

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://username:password@localhost/your_database'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = 'your_secret_key'
db.init_app(app)

@app.route('/admin')
def admin():
    return render_template('admin.html')

@app.route('/ajouter_classe', methods=['GET', 'POST'])
def ajouter_classe():
    form = ClasseForm()
    if form.validate_on_submit():
        classe = Classe(
            code=form.code.data,
            nom=form.nom.data,
            niveau=form.niveau.data,
            heurecours=form.heurecours.data
        )
        db.session.add(classe)
        db.session.commit()
        return redirect(url_for('admin'))
    return render_template('ajouter_classe.html', form=form)

@app.route('/ajouter_enseignant', methods=['GET', 'POST'])
def ajouter_enseignant():
    form = EnseignantForm()
    if form.validate_on_submit():
        enseignant = Enseignant(
            matricule=form.matricule.data,
            nom=form.nom.data,
            prenom=form.prenom.data,
            datenaissance=form.datenaissance.data,
            heurecourssemaines=form.heurecourssemaines.data,
            status=form.status.data
        )
        db.session.add(enseignant)
        db.session.commit()
        return redirect(url_for('admin'))
    return render_template('ajouter_enseignant.html', form=form)

@app.route('/ajouter_matiere', methods=['GET', 'POST'])
def ajouter_matiere():
    form = MatiereForm()
    if form.validate_on_submit():
        matiere = Matiere(
            id=form.id.data,
            intitule=form.intitule.data
        )
        db.session.add(matiere)
        db.session.commit()
        return redirect(url_for('admin'))
    return render_template('ajouter_matiere.html', form=form)

if __name__ == '__main__':
    app.run(debug=True)

#Page admin
{% extends 'base.html' %}

{% block content %}
  <h1>Administration</h1>
  <ul>
    <li><a href="{{ url_for('add_teacher') }}">Ajouter un enseignant</a></li>
    <li><a href="{{ url_for('add_classroom') }}">Ajouter une salle de classe</a></li>
  </ul>
{% endblock %}

# Nouvel Enseignant
{% extends 'base.html' %}

{% block content %}
  <h1>Ajouter un enseignant</h1>
  <form method="POST" action="">
    {{ form.hidden_tag() }}
    <p>
      {{ form.name.label }}<br>
      {{ form.name(size=32) }}
    </p>
    <p>
      {{ form.subject.label }}<br>
      {{ form.subject(size=32) }}
    </p>
    <p>{{ form.submit() }}</p>
  </form>
{% endblock %}

#Nouvelle classe
{% extends 'base.html' %}

{% block content %}
  <h1>Ajouter une salle de classe</h1>
  <form method="POST" action="">
    {{ form.hidden_tag() }}
    <p>
      {{ form.name.label }}<br>
      {{ form.name(size=32) }}
    </p>
    <p>
      {{ form.capacity.label }}<br>
      {{ form.capacity() }}
    </p>
    <p>{{ form.submit() }}</p>
  </form>
{% endblock %}
# config 
import os

class Config:
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'postgresql://school_user:your_password@localhost/school_db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your_secret_key'
